using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using Microsoft.Kinect;
using System.IO;
using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV.UI;
using Emgu.CV.WPF;
using System.Drawing;

namespace Kinect_Hand
{
    
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        private KinectSensor sensor;

        private WriteableBitmap colorBitmap;

        private byte[] colorPixels;

        Image<Bgr, Byte> imageOriginal;
        
        Image<Bgr, Byte> imageOriginalcopy;

        int frameWidth;
        
        int frameHeight;

        //Seq<Point> hull;
        
        //Seq<Point> filteredHull;
        
        Seq<MCvConvexityDefect> defects;
        
        MCvConvexityDefect[] defectArray;
        
        MCvBox2D box;
        
        Ellipse ellip;
        
        Ycc YCrCb_min;
        
        Ycc YCrCb_max;

        
        
        public MainWindow()
        {
            InitializeComponent();

            YCrCb_min = new Ycc(0, 131, 80);

            YCrCb_max = new Ycc(255, 185, 135);
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            foreach (var potentialSensor in KinectSensor.KinectSensors)
            {
                if (potentialSensor.Status == KinectStatus.Connected)
                {
                    this.sensor = potentialSensor;
                    break;
                }
            }

            if (null != this.sensor)
            {
                
                this.sensor.ColorStream.Enable(ColorImageFormat.RgbResolution640x480Fps30);

                
                this.colorPixels = new byte[this.sensor.ColorStream.FramePixelDataLength];

                
                this.colorBitmap = new WriteableBitmap(this.sensor.ColorStream.FrameWidth, this.sensor.ColorStream.FrameHeight, 96.0, 96.0, PixelFormats.Bgr32, null);

                
                this.Image.Source = this.colorBitmap;

                
                this.sensor.ColorFrameReady += this.SensorColorFrameReady;

                
                try
                {
                    this.sensor.Start();
                }
                catch (IOException)
                {
                    this.sensor = null;
                }
            }

            if (null == this.sensor)
            {
                MessageBox.Show("Kinect Not Found!");
            }
        }

        private void SensorColorFrameReady(object sender, ColorImageFrameReadyEventArgs e)
        {
            using (ColorImageFrame colorFrame = e.OpenColorImageFrame())
            {
                if (colorFrame != null)
                {
                    colorFrame.CopyPixelDataTo(this.colorPixels);

                    
                        this.colorBitmap.WritePixels(
                        new Int32Rect(0, 0, this.colorBitmap.PixelWidth, this.colorBitmap.PixelHeight),
                        this.colorPixels,
                        this.colorBitmap.PixelWidth * sizeof(int),
                        0);
                }
            }

            

            if (null == this.sensor)
            {
                MessageBox.Show("Please connect a Kinect & try again");
            }

            //Capture capture = new Capture();

            //Image<Bgr, byte> convertedImage = capture.QueryFrame();

            //image1.Source = BitmapSourceConvert.ToBitmapSource(convertedImage);

            
        }

        public Image<Gray, byte> DetectSkin(Image<Bgr, byte> Img, IColor min, IColor max)
        {
            Image<Ycc, Byte> currentYCrCbFrame = Img.Convert<Ycc, Byte>();
            Image<Gray, byte> skin = new Image<Gray, byte>(Img.Width, Img.Height);
            skin = currentYCrCbFrame.InRange((Ycc)min, (Ycc)max);
            StructuringElementEx rect_12 = new StructuringElementEx(12, 12, 6, 6, Emgu.CV.CvEnum.CV_ELEMENT_SHAPE.CV_SHAPE_RECT);
            CvInvoke.cvErode(skin, skin, rect_12, 1);
            StructuringElementEx rect_6 = new StructuringElementEx(6, 6, 3, 3, Emgu.CV.CvEnum.CV_ELEMENT_SHAPE.CV_SHAPE_RECT);
            CvInvoke.cvDilate(skin, skin, rect_6, 2);
            return skin;
        }

        private void ca (object sender, RoutedEventArgs e)
        {
            //try
            //{
                System.Drawing.Bitmap myBmp;

                //BitmapSource frame = BitmapFrame.Create(this.colorBitmap);

                BitmapEncoder enc = new BmpBitmapEncoder();

                enc.Frames.Add(BitmapFrame.Create(this.colorBitmap));

                MemoryStream ms = new MemoryStream();

                enc.Save(ms);

                using (myBmp = new System.Drawing.Bitmap(ms))
                {
                    
                    Image<Bgr, byte> img1 = new Image<Bgr, byte>(myBmp);
                    //Emgu.CV.KinectCapture 
                }



                //using (System.Drawing.Bitmap img_btmap = new System.Drawing.Bitmap(myBmp))
                //{
                  // Emgu.CV.Image<Bgr, Byte> img1 = new Image<Bgr, Byte>(myBmp);
                //}

            

                //BitmapImage bi = new BitmapImage();
                //bi.BeginInit();
                //bi.StreamSource = ms;
                ////bi.EndInit();

               // ImageSource img = bi;
                

                //image1.Source = img;

               // System.Drawing.Image frameActualKinect = myBmp;

                

                //myBmp = new System.Drawing.Bitmap(ms);

                //myBmp.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                //ms.Position = 0;
                //BitmapImage bi = new BitmapImage();
                //bi.BeginInit();
                //bi.StreamSource = ms;
                //bi.EndInit();

                //ImageSource img = bi;

                //image1.Source = img;

                //catch (Exception e1)
                //{
                //    Console.Write("Some M E ");

                //}
                //image1.Source = BitmapSourceConvert.ToBitmapSource(myBmp);



                //Bitmap bmap = new Bitmap(100, 100, System.Drawing.Imaging.PixelFormat.Format32bppRgb);

                //Image<Bgr, Byte> frameActualKinect = new Image<Bgr, Byte>(myBmp);

                //src.UriSource = new Uri("picture.jpg", UriKind.Relative);

                //Bitmap a1 = new Bitmap(@"C:\Users\Administrator\Pictures\1.bmp",true);

                //image1.Source = a1;

                //Image<Bgr, Byte> frameActualKinect = this.colorBitmap.ToOpenCVImage<Bgr, Byte>();
            

            //catch (Exception ew)
            //{ }
        }

            
    }
}
