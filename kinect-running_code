namespace Microsoft.Samples.Kinect.SkeletonBasics
{
    using System.IO;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Vector;
    using Microsoft.Kinect;
    using System;
    using System.IO.Ports;
    using System.Windows.Media.Media3D;
    using System.IO.Ports;
     summary
     Interaction logic for MainWindow.xaml
     summary
    public partial class MainWindow  Window
    {
         summary
         Width of output drawing
         summary
        
        private const float RenderWidth = 640.0f;


         summary
         Height of our output drawing
         summary
        private const float RenderHeight = 480.0f;

         summary
         Thickness of drawn joint lines
         summary
        private const double JointThickness = 3;

         summary
         Thickness of body center ellipse
         summary
        private const double BodyCenterThickness = 10;

         summary
         Thickness of clip edge rectangles
         summary
        private const double ClipBoundsThickness = 10;

         summary
         Brush used to draw skeleton center point
         summary
        private readonly Brush centerPointBrush = Brushes.Blue;

         summary
         Brush used for drawing joints that are currently tracked
         summary
        private readonly Brush trackedJointBrush = new SolidColorBrush(Color.FromArgb(255, 68, 192, 68));

         summary
         Brush used for drawing joints that are currently inferred
         summary        
        private readonly Brush inferredJointBrush = Brushes.Yellow;

         summary
         Pen used for drawing bones that are currently tracked
         summary
        private readonly Pen trackedBonePen = new Pen(Brushes.Green, 6);

         summary
         Pen used for drawing bones that are currently inferred
         summary        
        private readonly Pen inferredBonePen = new Pen(Brushes.Gray, 1);

         summary
         Active Kinect sensor
         summary
        private KinectSensor sensor;

         summary
         Drawing group for skeleton rendering output
         summary
        private DrawingGroup drawingGroup;

         summary
         Drawing image that we will display
         summary
        private DrawingImage imageSource;

         summary
         Initializes a new instance of the MainWindow class.
         summary

        SerialPort serialport1 = new SerialPort();

        public MainWindow()
        {
            InitializeComponent();

            ToGetTheAngleBetweenJoints();

            serialport1.PortName = COM6;

            serialport1.BaudRate = 9600;

            serialport1.Open();

        }

         summary
         Draws indicators to show which edges are clipping skeleton data
         summary
         param name=skeletonskeleton to draw clipping information forparam
         param name=drawingContextdrawing context to draw toparam
        private static void RenderClippedEdges(Skeleton skeleton, DrawingContext drawingContext)
        {
            if (skeleton.ClippedEdges.HasFlag(FrameEdges.Bottom))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, RenderHeight - ClipBoundsThickness, RenderWidth, ClipBoundsThickness));
            }

            if (skeleton.ClippedEdges.HasFlag(FrameEdges.Top))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, 0, RenderWidth, ClipBoundsThickness));
            }

            if (skeleton.ClippedEdges.HasFlag(FrameEdges.Left))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(0, 0, ClipBoundsThickness, RenderHeight));
            }

            if (skeleton.ClippedEdges.HasFlag(FrameEdges.Right))
            {
                drawingContext.DrawRectangle(
                    Brushes.Red,
                    null,
                    new Rect(RenderWidth - ClipBoundsThickness, 0, ClipBoundsThickness, RenderHeight));
            }
        }

         summary
         Execute startup tasks
         summary
         param name=senderobject sending the eventparam
         param name=eevent argumentsparam
        private void WindowLoaded(object sender, RoutedEventArgs e)
        {
             Create the drawing group we'll use for drawing
            this.drawingGroup = new DrawingGroup();

             Create an image source that we can use in our image control
            this.imageSource = new DrawingImage(this.drawingGroup);

             Display the drawing using our image control
            Image.Source = this.imageSource;

             Look through all sensors and start the first connected one.
             This requires that a Kinect is connected at the time of app startup.
             To make your app robust against plugunplug, 
             it is recommended to use KinectSensorChooser provided in Microsoft.Kinect.Toolkit
            foreach (var potentialSensor in KinectSensor.KinectSensors)
            {
                if (potentialSensor.Status == KinectStatus.Connected)
                {
                    this.sensor = potentialSensor;
                    break;
                }
            }

            if (null != this.sensor)
            {
                 Turn on the skeleton stream to receive skeleton frames
                this.sensor.SkeletonStream.Enable();

                 Add an event handler to be called whenever there is new color frame data
                this.sensor.SkeletonFrameReady += this.SensorSkeletonFrameReady;

                 Start the sensor!
                try
                {
                    this.sensor.Start();
                }
                catch (IOException)
                {
                    this.sensor = null;
                }
            }

            if (null == this.sensor)
            {
                this.statusBarText.Text = Properties.Resources.NoKinectReady;
            }
        }

         summary
         Execute shutdown tasks
         summary
         param name=senderobject sending the eventparam
         param name=eevent argumentsparam
        private void WindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (null != this.sensor)
            {
                this.sensor.Stop();
            }
        }

         summary
         Event handler for Kinect sensor's SkeletonFrameReady event
         summary
         param name=senderobject sending the eventparam
         param name=eevent argumentsparam
        private void SensorSkeletonFrameReady(object sender, SkeletonFrameReadyEventArgs e)
        {
            Skeleton[] skeletons = new Skeleton[0];

            using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame())
            {
                if (skeletonFrame != null)
                {
                    skeletons = new Skeleton[skeletonFrame.SkeletonArrayLength];
                    skeletonFrame.CopySkeletonDataTo(skeletons);
                }
            }

            using (DrawingContext dc = this.drawingGroup.Open())
            {
                 Draw a transparent background to set the render size
                dc.DrawRectangle(Brushes.Black, null, new Rect(0.0, 0.0, RenderWidth, RenderHeight));

                if (skeletons.Length != 0)
                {
                    foreach (Skeleton skel in skeletons)
                    {
                        RenderClippedEdges(skel, dc);

                        if (skel.TrackingState == SkeletonTrackingState.Tracked)
                        {
                            this.DrawBonesAndJoints(skel, dc);
                        }
                        else if (skel.TrackingState == SkeletonTrackingState.PositionOnly)
                        {
                            dc.DrawEllipse(
                            this.centerPointBrush,
                            null,
                            this.SkeletonPointToScreen(skel.Position),
                            BodyCenterThickness,
                            BodyCenterThickness);
                        }
                    }
                }

                 prevent drawing outside of our render area
                this.drawingGroup.ClipGeometry = new RectangleGeometry(new Rect(0.0, 0.0, RenderWidth, RenderHeight));
            }
        }

         summary
         Draws a skeleton's bones and joints
         summary
         param name=skeletonskeleton to drawparam
         param name=drawingContextdrawing context to draw toparam
        private void DrawBonesAndJoints(Skeleton skeleton, DrawingContext drawingContext)
        {
             Render Torso
            this.DrawBone(skeleton, drawingContext, JointType.Head, JointType.ShoulderCenter);
            this.DrawBone(skeleton, drawingContext, JointType.ShoulderCenter, JointType.ShoulderLeft);
            this.DrawBone(skeleton, drawingContext, JointType.ShoulderCenter, JointType.ShoulderRight);
            this.DrawBone(skeleton, drawingContext, JointType.ShoulderCenter, JointType.Spine);
            this.DrawBone(skeleton, drawingContext, JointType.Spine, JointType.HipCenter);
            this.DrawBone(skeleton, drawingContext, JointType.HipCenter, JointType.HipLeft);
            this.DrawBone(skeleton, drawingContext, JointType.HipCenter, JointType.HipRight);

             Left Arm
            this.DrawBone(skeleton, drawingContext, JointType.ShoulderLeft, JointType.ElbowLeft);
            this.DrawBone(skeleton, drawingContext, JointType.ElbowLeft, JointType.WristLeft);
            this.DrawBone(skeleton, drawingContext, JointType.WristLeft, JointType.HandLeft);

             Right Arm
            this.DrawBone(skeleton, drawingContext, JointType.ShoulderRight, JointType.ElbowRight);
            this.DrawBone(skeleton, drawingContext, JointType.ElbowRight, JointType.WristRight);
            this.DrawBone(skeleton, drawingContext, JointType.WristRight, JointType.HandRight);

             Left Leg
            this.DrawBone(skeleton, drawingContext, JointType.HipLeft, JointType.KneeLeft);
            this.DrawBone(skeleton, drawingContext, JointType.KneeLeft, JointType.AnkleLeft);
            this.DrawBone(skeleton, drawingContext, JointType.AnkleLeft, JointType.FootLeft);

             Right Leg
            this.DrawBone(skeleton, drawingContext, JointType.HipRight, JointType.KneeRight);
            this.DrawBone(skeleton, drawingContext, JointType.KneeRight, JointType.AnkleRight);
            this.DrawBone(skeleton, drawingContext, JointType.AnkleRight, JointType.FootRight);
 
             Render Joints
            foreach (Joint joint in skeleton.Joints)
            {
                Brush drawBrush = null;

                if (joint.TrackingState == JointTrackingState.Tracked)
                {
                    drawBrush = this.trackedJointBrush;                    
                }
                else if (joint.TrackingState == JointTrackingState.Inferred)
                {
                    drawBrush = this.inferredJointBrush;                    
                }

                if (drawBrush != null)
                {
                    drawingContext.DrawEllipse(drawBrush, null, this.SkeletonPointToScreen(joint.Position), JointThickness, JointThickness);
                }
            }

            ToGetTheAngleBetweenJoints(skeleton);
        }

         summary
         Maps a SkeletonPoint to lie within our render space and converts to Point
         summary
         param name=skelpointpoint to mapparam
         returnsmapped pointreturns
        private Point SkeletonPointToScreen(SkeletonPoint skelpoint)
        {
             Convert point to depth space.  
             We are not using depth directly, but we do want the points in our 640x480 output resolution.
            DepthImagePoint depthPoint = this.sensor.CoordinateMapper.MapSkeletonPointToDepthPoint(skelpoint, DepthImageFormat.Resolution640x480Fps30);
            return new Point(depthPoint.X, depthPoint.Y);
        }

         summary
         Draws a bone line between two joints
         summary
         param name=skeletonskeleton to draw bones fromparam
         param name=drawingContextdrawing context to draw toparam
         param name=jointType0joint to start drawing fromparam
         param name=jointType1joint to end drawing atparam
        private void DrawBone(Skeleton skeleton, DrawingContext drawingContext, JointType jointType0, JointType jointType1)
        {
            Joint joint0 = skeleton.Joints[jointType0];
            Joint joint1 = skeleton.Joints[jointType1];

             If we can't find either of these joints, exit
            if (joint0.TrackingState == JointTrackingState.NotTracked 
                joint1.TrackingState == JointTrackingState.NotTracked)
            {
                return;
            }

             Don't draw if both points are inferred
            if (joint0.TrackingState == JointTrackingState.Inferred &&
                joint1.TrackingState == JointTrackingState.Inferred)
            {
                return;
            }

             We assume all drawn bones are inferred unless BOTH joints are tracked
            Pen drawPen = this.inferredBonePen;
            if (joint0.TrackingState == JointTrackingState.Tracked && joint1.TrackingState == JointTrackingState.Tracked)
            {
                drawPen = this.trackedBonePen;
            }

            drawingContext.DrawLine(drawPen, this.SkeletonPointToScreen(joint0.Position), this.SkeletonPointToScreen(joint1.Position));

        }

        private void ToGetTheAngleBetweenJoints()
        {
            throw new System.NotImplementedException();
        }

         summary
         Handles the checking or unchecking of the seated mode combo box
         summary
         param name=senderobject sending the eventparam
         param name=eevent argumentsparam
        private void CheckBoxSeatedModeChanged(object sender, RoutedEventArgs e)
        {
            if (null != this.sensor)
            {
                if (this.checkBoxSeatedMode.IsChecked.GetValueOrDefault())
                {
                    this.sensor.SkeletonStream.TrackingMode = SkeletonTrackingMode.Seated;
                }
                else
                {
                    this.sensor.SkeletonStream.TrackingMode = SkeletonTrackingMode.Default;
                }
            }
        }

        public void ToGetTheAngleBetweenJoints(Skeleton skeleton)
        {

            Joint r_wrist = skeleton.Joints[JointType.WristRight];

            Joint r_shoulder = skeleton.Joints[JointType.ShoulderRight];

            Joint r_elbow = skeleton.Joints[JointType.ElbowRight];

            double x1 = r_shoulder.Position.X;
            double y1 = r_shoulder.Position.Y;
            double z1 = r_shoulder.Position.Z;

            double x2 = r_elbow.Position.X;
            double y2 = r_elbow.Position.Y;
            double z2 = r_elbow.Position.Z;

            double x3 = r_wrist.Position.X;
            double y3 = r_wrist.Position.Y;
            double z3 = r_wrist.Position.Z;

            Vector3D v1 = new Vector3D(x2,y2,z2);
            Vector3D v2 = new Vector3D(x1,y1,z1);
            Vector3D v3 = new Vector3D(x3,y3,z3);

            Vector3D b1 = v3 - v1;
            Vector3D b2 = v2 - v1;

            b1.Normalize();
            b2.Normalize();

            double AngleInRadians = AngleBetweenTwoVectors(b1, b2);
            double AngleInDeg = AngleInRadians  (180  Math.PI);
            Angle.Content = (int)AngleInDeg;

            serialport1.Write((int)AngleInDeg + E);


        }

         public float AngleBetweenTwoVectors(Vector3D vectorA, Vector3D vectorB)
         {
            
             double dotProduct = 0.0f;
            
             
             
             dotProduct=  Vector3D.DotProduct(vectorA,  vectorB);

            return (float)Math.Acos(dotProduct); 
         }
    }
   
}
